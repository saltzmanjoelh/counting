{"version":3,"sources":["Card.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["textColors","Colors","useStyles","makeStyles","theme","paper","margin","backgroundColor","breakpoints","down","flexBasis","up","empty","content","float","paddingTop","Card","props","classes","audio","Audio","value","Paper","className","Button","onClick","play","Box","color","Typography","variant","numbers","Array","from","keys","slice","root","display","flexWrap","justifyContent","alignItems","alignContent","width","height","App","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kXAKMA,EAAa,CAACC,IAAY,KAAMA,IAAY,KAAMA,IAAY,KAAMA,IAAc,KAAMA,IAAY,KAC1GA,IAAkB,KAAMA,IAAa,KAAMA,IAAkB,KAAMA,IAAkB,KAAMA,IAAW,MAEhGC,EAAYC,YAAW,SAAAC,GAAK,YAAK,CACrCC,OAAK,GACHC,OAAQ,EACRC,gBAAiB,QAFd,cAGFH,EAAMI,YAAYC,KAAK,MAAQ,CAC9BC,UAAW,QAJV,cAMFN,EAAMI,YAAYG,GAAG,MAAQ,CAC5BD,UAAW,OAPV,wBASM,QATN,+BAUa,UAVb,2BAWS,UAXT,6BAYW,UAZX,GAcLE,MAAO,CACLC,QAAS,GACTC,MAAO,OACPC,WAAY,WA8BDC,MA1Bf,SAAcC,GACZ,IAAMC,EAAUhB,IACViB,EAAQ,IAAIC,MAAJ,oEAAuEH,EAAMI,MAA7E,SAId,OACE,kBAACC,EAAA,EAAD,CAAOC,UAAWL,EAAQb,OAExB,kBAACmB,EAAA,EAAD,CAAQC,QANZ,WACEN,EAAMO,SAMJ,kBAACC,EAAA,EAAD,CAAKJ,UAAWL,EAAQN,QACxB,kBAACe,EAAA,EAAD,CAAKC,MAAO5B,EAAWiB,EAAMI,MAAQ,KACnC,kBAACQ,EAAA,EAAD,CAAYC,QAAQ,MAAMb,EAAMI,WCpClCU,EAAUC,MAAMC,KAAKD,MAAM,IAAIE,QAAQC,MAAM,GAE7CjC,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCgC,KAAM,CACJC,QAAS,OACTC,SAAU,OACVC,eAAgB,SAChBC,WAAY,SACZC,aAAc,SAEdC,MAAO,OACPC,OAAQ,WAiBGC,EAZO,WACpB,IAAM1B,EAAUhB,IAEhB,OACE,kBAACyB,EAAA,EAAD,CAAKJ,UAAWL,EAAQkB,MACnBL,EAAQc,IAAI,SAAAxB,GAAK,OACd,kBAAC,EAAD,CAAMA,MAAOA,EAAOyB,IAAKzB,QChBjB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cce10f24.chunk.js","sourcesContent":["import React from 'react';\nimport { Paper, Box, Typography, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport * as Colors from '@material-ui/core/colors';\n\nconst textColors = [Colors.blue[500], Colors.pink[500], Colors.cyan[500], Colors.purple[500], Colors.teal[500],\nColors.deepPurple[500], Colors.green[500], Colors.deepOrange[500], Colors.lightGreen[500], Colors.red[900]]\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    margin: 1,\n    backgroundColor: '#333',\n    [theme.breakpoints.down('xs')]: {\n      flexBasis: \"18%\",\n    },\n    [theme.breakpoints.up('sm')]: {\n      flexBasis: \"9%\",\n    },\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    alignContent: 'center',\n  },\n  empty: {\n    content: '',\n    float: 'left',\n    paddingTop: '100%',\n  },\n}));\n\nfunction Card(props: { value: number }) {\n  const classes = useStyles();\n  const audio = new Audio(`https://evolution.voxeo.com/library/audio/prompts/numbers/${props.value}.wav`);\n  function handleClick() {\n    audio.play();\n  }\n  return (\n    <Paper className={classes.paper}>\n\n      <Button onClick={handleClick}>\n      <Box className={classes.empty}></Box>\n      <Box color={textColors[props.value % 10]}>\n        <Typography variant='h2'>{props.value}</Typography>\n      </Box> \n    </Button>\n\n      {/* <Box className={classes.empty}></Box>\n      <Box color={textColors[props.value % 10]}>\n        <Typography>{props.value}</Typography>\n      </Box> */}\n\n\n    </Paper>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport {  Box } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport './App.css';\nimport Card from './Card'\n\nconst numbers = Array.from(Array(21).keys()).slice(1);\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    alignContent: \"center\",\n    // backgroundColor: '#212121',\n    width: '100%',\n    height: '100%',\n  },\n\n}));\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.root}>\n        {numbers.map(value => (\n            <Card value={value} key={value} />\n        ))}\n    </Box>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}